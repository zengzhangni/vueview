{"remainingRequest":"D:\\vsdemo\\mrb_s\\node_modules\\babel-loader\\lib\\index.js!D:\\vsdemo\\mrb_s\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\vsdemo\\mrb_s\\src\\plugins\\axios.js","dependencies":[{"path":"D:\\vsdemo\\mrb_s\\src\\plugins\\axios.js","mtime":1562751322819},{"path":"D:\\vsdemo\\mrb_s\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561020346158},{"path":"D:\\vsdemo\\mrb_s\\node_modules\\babel-loader\\lib\\index.js","mtime":1561020343978},{"path":"D:\\vsdemo\\mrb_s\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1562639120225}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport { Notify } from 'vant';\nimport Cookies from 'js-cookie';\nimport router from \"../router\";\nvar baseURL = '';\nconsole.log(process.env.NODE_ENV); // 根据环境设置 baseURL\n\nswitch (process.env.NODE_ENV) {\n  case 'dev':\n    baseURL = 'https://beautybond.cdhnf.cn/wx';\n    break;\n\n  case 'dev-local':\n    baseURL = 'https://beautybond-dev.cdhnf.cn/wx';\n    break;\n\n  case 'test':\n    baseURL = 'https://beautybond-uat.cdhnf.cn/wx';\n    break;\n\n  case 'production':\n    baseURL = 'https://production.cdhnf.cn/wx';\n    break;\n  // case 'development':\n  //   baseURL = 'http://139.196.206.94'\n  //       break\n\n  default:\n    baseURL = '/ss';\n}\n\nvar http = axios.create({\n  baseURL: baseURL,\n  timeout: 6000,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\nhttp.defaults.retry = 3; // 重试次数\n\nhttp.defaults.retryDelay = 2000; // 重试延时\n\nhttp.defaults.shouldRetry = function (err) {\n  return !err.response;\n}; // 添加请求拦截器\n\n\nhttp.interceptors.request.use( // 请求前\nfunction (config) {\n  // 如果登陆了则为 headers 添加 token 信息\n  if (Cookies.getJSON('user')) {\n    var headers = config.headers;\n    headers.accessToken = Cookies.getJSON('user').token;\n  }\n\n  return config;\n}, // 错误\nfunction (error) {\n  return Promise.reject(error);\n}); // 响应拦截\n\n/* eslint-disable */\n\nhttp.interceptors.response.use(function (res) {\n  if (res.status >= 200 && res.status < 300) return res.data;\n  return Promise.reject({\n    response: res\n  });\n}, function (err) {\n  console.log(err);\n  var config = err.config,\n      response = err.response; // 返回状态码 401 时代表未登录\n\n  if (response.status === 401) {\n    router.replace(\"/login?url=\".concat(escape(router.currentRoute.fullPath)));\n    Notify({\n      message: '请登录',\n      duration: 3000,\n      background: '#1989fa'\n    });\n    return Promise.reject(err);\n  } // 如果没有重试，提示错误信息\n\n\n  if (!config.__retryCount) {\n    Notify({\n      message: '服务器错误',\n      duration: 3000,\n      background: '#f5222d'\n    });\n  } // 判断是否配置了重试\n\n\n  if (!config || !config.retry) return Promise.reject(err);\n\n  if (!config.shouldRetry || typeof config.shouldRetry !== 'function') {\n    return Promise.reject(err);\n  } // 判断是否满足重试条件\n\n\n  if (!config.shouldRetry(err)) {\n    return Promise.reject(err);\n  } // 设置重置次数，默认为0\n\n\n  config.__retryCount = config.__retryCount || 0; // 判断是否超过了重试次数\n\n  if (config.__retryCount >= config.retry) {\n    return Promise.reject(err);\n  } // 重试次数自增\n\n\n  config.__retryCount += 1; // 延时处理，每次都增长\n\n  var backoff = new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, config.retryDelay * config.__retryCount);\n  }); // 重新发起axios请求\n\n  return backoff.then(function () {\n    return http(Object.assign({}, config, {\n      baseURL: ''\n    }));\n  });\n}\n/* eslint-enable */\n);\nexport default http;",{"version":3,"sources":["D:\\vsdemo\\mrb_s\\src\\plugins\\axios.js"],"names":["axios","Notify","Cookies","router","baseURL","console","log","process","env","NODE_ENV","http","create","timeout","headers","defaults","retry","retryDelay","shouldRetry","err","response","interceptors","request","use","config","getJSON","accessToken","token","error","Promise","reject","res","status","data","replace","escape","currentRoute","fullPath","message","duration","background","__retryCount","backoff","resolve","setTimeout","then","Object","assign"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Notify } from 'vant'\r\nimport Cookies from 'js-cookie'\r\nimport router from '../router'\r\n\r\nlet baseURL = ''\r\nconsole.log(process.env.NODE_ENV);\r\n// 根据环境设置 baseURL\r\nswitch (process.env.NODE_ENV) {\r\n  case 'dev':\r\n    baseURL = 'https://beautybond.cdhnf.cn/wx'\r\n    break\r\n  case 'dev-local':\r\n    baseURL = 'https://beautybond-dev.cdhnf.cn/wx'\r\n    break\r\n  case 'test':\r\n    baseURL = 'https://beautybond-uat.cdhnf.cn/wx'\r\n    break\r\n  case 'production':\r\n    baseURL = 'https://production.cdhnf.cn/wx'\r\n    break\r\n  // case 'development':\r\n  //   baseURL = 'http://139.196.206.94'\r\n  //       break\r\n  default:\r\n    baseURL = '/ss'\r\n}\r\n\r\nconst http = axios.create({\r\n  baseURL,\r\n  timeout: 6000,\r\n  headers: {\r\n    'Content-Type': 'application/json; charset=utf-8'\r\n  }\r\n})\r\n\r\nhttp.defaults.retry = 3 // 重试次数\r\nhttp.defaults.retryDelay = 2000 // 重试延时\r\nhttp.defaults.shouldRetry = err => !err.response\r\n\r\n// 添加请求拦截器\r\nhttp.interceptors.request.use(\r\n  // 请求前\r\n  config => {\r\n    // 如果登陆了则为 headers 添加 token 信息\r\n    if (Cookies.getJSON('user')) {\r\n      const { headers } = config\r\n      headers.accessToken = Cookies.getJSON('user').token\r\n    }\r\n\r\n    return config\r\n  },\r\n  // 错误\r\n  error => Promise.reject(error)\r\n)\r\n\r\n// 响应拦截\r\n/* eslint-disable */\r\nhttp.interceptors.response.use(\r\n  res => {\r\n    if (res.status >= 200 && res.status < 300) return res.data\r\n\r\n    return Promise.reject({\r\n      response: res\r\n    })\r\n  },\r\n  err => {\r\n    console.log(err)\r\n    const { config, response } = err\r\n\r\n    // 返回状态码 401 时代表未登录\r\n    if (response.status === 401) {\r\n      router.replace(`/login?url=${escape(router.currentRoute.fullPath)}`)\r\n\r\n      Notify({\r\n        message: '请登录',\r\n        duration: 3000,\r\n        background: '#1989fa'\r\n      })\r\n\r\n      return Promise.reject(err)\r\n    }\r\n\r\n    // 如果没有重试，提示错误信息\r\n    if (!config.__retryCount) {\r\n      Notify({\r\n        message: '服务器错误',\r\n        duration: 3000,\r\n        background: '#f5222d'\r\n      })\r\n    }\r\n\r\n    // 判断是否配置了重试\r\n    if (!config || !config.retry) return Promise.reject(err)\r\n\r\n    if (!config.shouldRetry || typeof config.shouldRetry !== 'function') {\r\n      return Promise.reject(err)\r\n    }\r\n\r\n    // 判断是否满足重试条件\r\n    if (!config.shouldRetry(err)) {\r\n      return Promise.reject(err)\r\n    }\r\n\r\n    // 设置重置次数，默认为0\r\n    config.__retryCount = config.__retryCount || 0\r\n\r\n    // 判断是否超过了重试次数\r\n    if (config.__retryCount >= config.retry) {\r\n      return Promise.reject(err)\r\n    }\r\n\r\n    // 重试次数自增\r\n    config.__retryCount += 1\r\n\r\n    // 延时处理，每次都增长\r\n    const backoff = new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve()\r\n      }, config.retryDelay * config.__retryCount)\r\n    })\r\n\r\n    // 重新发起axios请求\r\n    return backoff.then(() => http(Object.assign({}, config, { baseURL: '' })))\r\n  }\r\n  /* eslint-enable */\r\n)\r\n\r\nexport default http\r\n"]}]}